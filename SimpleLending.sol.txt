// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./SimpleToken.sol";

contract SimpleLending {
    SimpleToken public token;
    mapping(address => uint256) public deposits;
    uint256 public interestRate;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);
    event AccrueInterest(uint256 amount);

    constructor(address _tokenAddress, uint256 _interestRate) {
        token = SimpleToken(_tokenAddress);
        interestRate = _interestRate;
    }

    function deposit(uint256 _amount) external {
        require(_amount > 0, "Invalid amount");
        require(token.transferFrom(msg.sender, address(this), _amount), "Token transfer failed");

        deposits[msg.sender] += _amount;
        emit Deposit(msg.sender, _amount);
    }

    function withdraw() external {
        uint256 amount = deposits[msg.sender];
        require(amount > 0, "No deposits to withdraw");

        uint256 interest = (amount * interestRate) / 100;
        uint256 totalAmount = amount + interest;

        require(token.balanceOf(address(this)) >= totalAmount, "Not enough balance in the contract");

        deposits[msg.sender] = 0;
        token.transfer(msg.sender, totalAmount);
        emit Withdraw(msg.sender, totalAmount);
    }

    function accrueInterest() external {
        uint256 contractBalance = token.balanceOf(address(this));
        uint256 interestToDistribute = (contractBalance * interestRate) / 100;
        require(interestToDistribute > 0, "No interest to accrue");

        token.transfer(msg.sender, interestToDistribute);
        emit AccrueInterest(interestToDistribute);
    }
}